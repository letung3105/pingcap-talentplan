mod common;

use common::*;
use criterion::{
    black_box, criterion_group, criterion_main, BatchSize, Bencher, Criterion, Throughput,
};
use kvs::{engines::Engine, KvsEngine};
use rand::prelude::*;
use tempfile::TempDir;

const ITER: usize = 1000;
const KEY_SIZE: usize = 1000;
const VAL_SIZE: usize = 1000;

/// Call set on the same key-value store instance for every benchmark iteration, the key and
/// value will be randomly generated bytes sequences with size of `KEY_SIZE` and `VAL_SIZE`
pub fn sequential_write_bulk(c: &mut Criterion) {
    let mut g = c.benchmark_group("sequential_write_bulk");
    g.throughput(Throughput::Bytes((ITER * (KEY_SIZE + VAL_SIZE)) as u64));
    g.bench_with_input("kvs", &Engine::Kvs, sequential_write_bulk_bench);
    g.bench_with_input("sled", &Engine::Sled, sequential_write_bulk_bench);
    g.finish();
}

fn sequential_write_bulk_bench(b: &mut Bencher, engine: &Engine) {
    let mut rng = StdRng::from_seed([0u8; 32]);
    let kv_pairs = prebuilt_kv_pairs(&mut rng, ITER, KEY_SIZE, VAL_SIZE);

    match *engine {
        Engine::Kvs => {
            b.iter_batched(
                || {
                    let (engine, tmpdir) = prep_kv_store();
                    (engine, kv_pairs.clone(), tmpdir)
                },
                sequential_write_bulk_bench_iter,
                BatchSize::SmallInput,
            );
        }
        Engine::Sled => {
            b.iter_batched(
                || {
                    let (engine, tmpdir) = prep_sled();
                    (engine, kv_pairs.clone(), tmpdir)
                },
                sequential_write_bulk_bench_iter,
                BatchSize::SmallInput,
            );
        }
    }
}

fn sequential_write_bulk_bench_iter<E>((engine, kv_pairs, _tmpdir): (E, Vec<(String, String)>, TempDir))
where
    E: KvsEngine,
{
    kv_pairs
        .into_iter()
        .for_each(|(k, v)| engine.set(black_box(k), black_box(v)).unwrap());
}

/// Call get on a pre-populted key-value store instance for every benchmark iteration, the key
/// and value will be randomly generated bytes sequences with size of `KEY_SIZE` and `VAL_SIZE`
pub fn sequential_read_bulk(c: &mut Criterion) {
    let mut rng = StdRng::from_seed([0u8; 32]);
    let kv_pairs = prebuilt_kv_pairs(&mut rng, ITER, KEY_SIZE, VAL_SIZE);

    let mut g = c.benchmark_group("sequential_read_bulk");
    g.throughput(Throughput::Bytes((ITER * KEY_SIZE) as u64));
    {
        let (engine, _tmpdir) = prep_kv_store();
        g.bench_with_input("kvs", &(engine, &kv_pairs), sequential_read_bulk_bench);
    }
    {
        let (engine, _tmpdir) = prep_sled();
        g.bench_with_input("sled", &(engine, &kv_pairs), sequential_read_bulk_bench);
    }
    g.finish();
}

fn sequential_read_bulk_bench<E>(b: &mut Bencher, (engine, kv_pairs): &(E, &Vec<(String, String)>))
where
    E: KvsEngine,
{
    kv_pairs
        .iter()
        .cloned()
        .for_each(|(k, v)| engine.set(k, v).unwrap());

    let mut rng = StdRng::from_seed([0u8; 32]);
    b.iter_batched(
        || {
            let mut kv_pairs = (*kv_pairs).clone();
            kv_pairs.shuffle(&mut rng);
            kv_pairs
        },
        |kv_pairs| {
            kv_pairs
                .into_iter()
                .for_each(|(k, v)| assert_eq!(Some(v), engine.get(black_box(k)).unwrap()));
        },
        BatchSize::SmallInput,
    );
}

criterion_main!(benches);
criterion_group!(benches, sequential_write_bulk, sequential_read_bulk);
